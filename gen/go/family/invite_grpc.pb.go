// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: family/invite.proto

package famv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InviteClient is the client API for Invite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InviteClient interface {
	GetInvites(ctx context.Context, in *GetInvitesRequest, opts ...grpc.CallOption) (*GetInvitesResponse, error)
	SendInvite(ctx context.Context, in *SendInviteRequest, opts ...grpc.CallOption) (*SendInviteResponse, error)
	AcceptInvite(ctx context.Context, in *AcceptInviteRequest, opts ...grpc.CallOption) (*AcceptInviteResponse, error)
	DenyInvite(ctx context.Context, in *DenyInviteRequest, opts ...grpc.CallOption) (*DenyInviteResponse, error)
	DeleteUserInvites(ctx context.Context, in *DeleteUserInvitesRequest, opts ...grpc.CallOption) (*DeleteUserInvitesResponse, error)
}

type inviteClient struct {
	cc grpc.ClientConnInterface
}

func NewInviteClient(cc grpc.ClientConnInterface) InviteClient {
	return &inviteClient{cc}
}

func (c *inviteClient) GetInvites(ctx context.Context, in *GetInvitesRequest, opts ...grpc.CallOption) (*GetInvitesResponse, error) {
	out := new(GetInvitesResponse)
	err := c.cc.Invoke(ctx, "/family.Invite/GetInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteClient) SendInvite(ctx context.Context, in *SendInviteRequest, opts ...grpc.CallOption) (*SendInviteResponse, error) {
	out := new(SendInviteResponse)
	err := c.cc.Invoke(ctx, "/family.Invite/SendInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteClient) AcceptInvite(ctx context.Context, in *AcceptInviteRequest, opts ...grpc.CallOption) (*AcceptInviteResponse, error) {
	out := new(AcceptInviteResponse)
	err := c.cc.Invoke(ctx, "/family.Invite/AcceptInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteClient) DenyInvite(ctx context.Context, in *DenyInviteRequest, opts ...grpc.CallOption) (*DenyInviteResponse, error) {
	out := new(DenyInviteResponse)
	err := c.cc.Invoke(ctx, "/family.Invite/DenyInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteClient) DeleteUserInvites(ctx context.Context, in *DeleteUserInvitesRequest, opts ...grpc.CallOption) (*DeleteUserInvitesResponse, error) {
	out := new(DeleteUserInvitesResponse)
	err := c.cc.Invoke(ctx, "/family.Invite/DeleteUserInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InviteServer is the server API for Invite service.
// All implementations must embed UnimplementedInviteServer
// for forward compatibility
type InviteServer interface {
	GetInvites(context.Context, *GetInvitesRequest) (*GetInvitesResponse, error)
	SendInvite(context.Context, *SendInviteRequest) (*SendInviteResponse, error)
	AcceptInvite(context.Context, *AcceptInviteRequest) (*AcceptInviteResponse, error)
	DenyInvite(context.Context, *DenyInviteRequest) (*DenyInviteResponse, error)
	DeleteUserInvites(context.Context, *DeleteUserInvitesRequest) (*DeleteUserInvitesResponse, error)
	mustEmbedUnimplementedInviteServer()
}

// UnimplementedInviteServer must be embedded to have forward compatible implementations.
type UnimplementedInviteServer struct {
}

func (UnimplementedInviteServer) GetInvites(context.Context, *GetInvitesRequest) (*GetInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvites not implemented")
}
func (UnimplementedInviteServer) SendInvite(context.Context, *SendInviteRequest) (*SendInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvite not implemented")
}
func (UnimplementedInviteServer) AcceptInvite(context.Context, *AcceptInviteRequest) (*AcceptInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvite not implemented")
}
func (UnimplementedInviteServer) DenyInvite(context.Context, *DenyInviteRequest) (*DenyInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenyInvite not implemented")
}
func (UnimplementedInviteServer) DeleteUserInvites(context.Context, *DeleteUserInvitesRequest) (*DeleteUserInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserInvites not implemented")
}
func (UnimplementedInviteServer) mustEmbedUnimplementedInviteServer() {}

// UnsafeInviteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InviteServer will
// result in compilation errors.
type UnsafeInviteServer interface {
	mustEmbedUnimplementedInviteServer()
}

func RegisterInviteServer(s grpc.ServiceRegistrar, srv InviteServer) {
	s.RegisterService(&Invite_ServiceDesc, srv)
}

func _Invite_GetInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServer).GetInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/family.Invite/GetInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServer).GetInvites(ctx, req.(*GetInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invite_SendInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServer).SendInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/family.Invite/SendInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServer).SendInvite(ctx, req.(*SendInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invite_AcceptInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServer).AcceptInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/family.Invite/AcceptInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServer).AcceptInvite(ctx, req.(*AcceptInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invite_DenyInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenyInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServer).DenyInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/family.Invite/DenyInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServer).DenyInvite(ctx, req.(*DenyInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invite_DeleteUserInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServer).DeleteUserInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/family.Invite/DeleteUserInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServer).DeleteUserInvites(ctx, req.(*DeleteUserInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Invite_ServiceDesc is the grpc.ServiceDesc for Invite service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Invite_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "family.Invite",
	HandlerType: (*InviteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInvites",
			Handler:    _Invite_GetInvites_Handler,
		},
		{
			MethodName: "SendInvite",
			Handler:    _Invite_SendInvite_Handler,
		},
		{
			MethodName: "AcceptInvite",
			Handler:    _Invite_AcceptInvite_Handler,
		},
		{
			MethodName: "DenyInvite",
			Handler:    _Invite_DenyInvite_Handler,
		},
		{
			MethodName: "DeleteUserInvites",
			Handler:    _Invite_DeleteUserInvites_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "family/invite.proto",
}
