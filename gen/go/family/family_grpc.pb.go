// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: family/family.proto

package famv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FamilyClient is the client API for Family service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FamilyClient interface {
	CreateFamily(ctx context.Context, in *CreateFamilyRequest, opts ...grpc.CallOption) (*CreateFamilyResponse, error)
	LeaveFamily(ctx context.Context, in *LeaveFamilyRequest, opts ...grpc.CallOption) (*LeaveFamilyResponse, error)
	GetFamilyInfo(ctx context.Context, in *GetFamilyInfoRequest, opts ...grpc.CallOption) (*GetFamilyInfoResponse, error)
}

type familyClient struct {
	cc grpc.ClientConnInterface
}

func NewFamilyClient(cc grpc.ClientConnInterface) FamilyClient {
	return &familyClient{cc}
}

func (c *familyClient) CreateFamily(ctx context.Context, in *CreateFamilyRequest, opts ...grpc.CallOption) (*CreateFamilyResponse, error) {
	out := new(CreateFamilyResponse)
	err := c.cc.Invoke(ctx, "/family.Family/CreateFamily", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyClient) LeaveFamily(ctx context.Context, in *LeaveFamilyRequest, opts ...grpc.CallOption) (*LeaveFamilyResponse, error) {
	out := new(LeaveFamilyResponse)
	err := c.cc.Invoke(ctx, "/family.Family/LeaveFamily", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyClient) GetFamilyInfo(ctx context.Context, in *GetFamilyInfoRequest, opts ...grpc.CallOption) (*GetFamilyInfoResponse, error) {
	out := new(GetFamilyInfoResponse)
	err := c.cc.Invoke(ctx, "/family.Family/GetFamilyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FamilyServer is the server API for Family service.
// All implementations must embed UnimplementedFamilyServer
// for forward compatibility
type FamilyServer interface {
	CreateFamily(context.Context, *CreateFamilyRequest) (*CreateFamilyResponse, error)
	LeaveFamily(context.Context, *LeaveFamilyRequest) (*LeaveFamilyResponse, error)
	GetFamilyInfo(context.Context, *GetFamilyInfoRequest) (*GetFamilyInfoResponse, error)
	mustEmbedUnimplementedFamilyServer()
}

// UnimplementedFamilyServer must be embedded to have forward compatible implementations.
type UnimplementedFamilyServer struct {
}

func (UnimplementedFamilyServer) CreateFamily(context.Context, *CreateFamilyRequest) (*CreateFamilyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFamily not implemented")
}
func (UnimplementedFamilyServer) LeaveFamily(context.Context, *LeaveFamilyRequest) (*LeaveFamilyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveFamily not implemented")
}
func (UnimplementedFamilyServer) GetFamilyInfo(context.Context, *GetFamilyInfoRequest) (*GetFamilyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFamilyInfo not implemented")
}
func (UnimplementedFamilyServer) mustEmbedUnimplementedFamilyServer() {}

// UnsafeFamilyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FamilyServer will
// result in compilation errors.
type UnsafeFamilyServer interface {
	mustEmbedUnimplementedFamilyServer()
}

func RegisterFamilyServer(s grpc.ServiceRegistrar, srv FamilyServer) {
	s.RegisterService(&Family_ServiceDesc, srv)
}

func _Family_CreateFamily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFamilyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilyServer).CreateFamily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/family.Family/CreateFamily",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilyServer).CreateFamily(ctx, req.(*CreateFamilyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Family_LeaveFamily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveFamilyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilyServer).LeaveFamily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/family.Family/LeaveFamily",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilyServer).LeaveFamily(ctx, req.(*LeaveFamilyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Family_GetFamilyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFamilyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilyServer).GetFamilyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/family.Family/GetFamilyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilyServer).GetFamilyInfo(ctx, req.(*GetFamilyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Family_ServiceDesc is the grpc.ServiceDesc for Family service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Family_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "family.Family",
	HandlerType: (*FamilyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFamily",
			Handler:    _Family_CreateFamily_Handler,
		},
		{
			MethodName: "LeaveFamily",
			Handler:    _Family_LeaveFamily_Handler,
		},
		{
			MethodName: "GetFamilyInfo",
			Handler:    _Family_GetFamilyInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "family/family.proto",
}
