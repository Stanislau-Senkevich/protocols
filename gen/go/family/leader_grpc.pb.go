// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: family/leader.proto

package famv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FamilyLeaderClient is the client API for FamilyLeader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FamilyLeaderClient interface {
	RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error)
	DeleteFamily(ctx context.Context, in *DeleteFamilyRequest, opts ...grpc.CallOption) (*DeleteFamilyResponse, error)
}

type familyLeaderClient struct {
	cc grpc.ClientConnInterface
}

func NewFamilyLeaderClient(cc grpc.ClientConnInterface) FamilyLeaderClient {
	return &familyLeaderClient{cc}
}

func (c *familyLeaderClient) RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error) {
	out := new(RemoveUserResponse)
	err := c.cc.Invoke(ctx, "/family.FamilyLeader/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyLeaderClient) DeleteFamily(ctx context.Context, in *DeleteFamilyRequest, opts ...grpc.CallOption) (*DeleteFamilyResponse, error) {
	out := new(DeleteFamilyResponse)
	err := c.cc.Invoke(ctx, "/family.FamilyLeader/DeleteFamily", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FamilyLeaderServer is the server API for FamilyLeader service.
// All implementations must embed UnimplementedFamilyLeaderServer
// for forward compatibility
type FamilyLeaderServer interface {
	RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error)
	DeleteFamily(context.Context, *DeleteFamilyRequest) (*DeleteFamilyResponse, error)
	mustEmbedUnimplementedFamilyLeaderServer()
}

// UnimplementedFamilyLeaderServer must be embedded to have forward compatible implementations.
type UnimplementedFamilyLeaderServer struct {
}

func (UnimplementedFamilyLeaderServer) RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedFamilyLeaderServer) DeleteFamily(context.Context, *DeleteFamilyRequest) (*DeleteFamilyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFamily not implemented")
}
func (UnimplementedFamilyLeaderServer) mustEmbedUnimplementedFamilyLeaderServer() {}

// UnsafeFamilyLeaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FamilyLeaderServer will
// result in compilation errors.
type UnsafeFamilyLeaderServer interface {
	mustEmbedUnimplementedFamilyLeaderServer()
}

func RegisterFamilyLeaderServer(s grpc.ServiceRegistrar, srv FamilyLeaderServer) {
	s.RegisterService(&FamilyLeader_ServiceDesc, srv)
}

func _FamilyLeader_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilyLeaderServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/family.FamilyLeader/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilyLeaderServer).RemoveUser(ctx, req.(*RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilyLeader_DeleteFamily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFamilyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilyLeaderServer).DeleteFamily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/family.FamilyLeader/DeleteFamily",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilyLeaderServer).DeleteFamily(ctx, req.(*DeleteFamilyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FamilyLeader_ServiceDesc is the grpc.ServiceDesc for FamilyLeader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FamilyLeader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "family.FamilyLeader",
	HandlerType: (*FamilyLeaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemoveUser",
			Handler:    _FamilyLeader_RemoveUser_Handler,
		},
		{
			MethodName: "DeleteFamily",
			Handler:    _FamilyLeader_DeleteFamily_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "family/leader.proto",
}
